Welcome to jami-commander, a Jami CLI client. ─── This program implements a
simple Jami CLI client that can send messages, etc. It can send one or multiple
message to one or multiple Jami conversations. Arbitrary files can be sent as
well. Listen and receiving is not yet implemented. Please write a PR for
listening. End-to-end encryption is enabled by default and cannot be turned off.
─── Bundling several actions together into a single call to jami-commander is
faster than calling jami-commander multiple times with only one action. If there
are both 'set' and 'get' actions present in the arguments, then the 'set'
actions will be performed before the 'get' actions. Then send actions and at the
very end listen actions will be performed. ─── For even more explications and
examples also read the documentation provided in the on-line Github README.md
file or the README.md in your local installation.  ─── For less information just
use --help instead of --manual.

usage: jami-commander [--usage] [-h] [--manual] [--readme] [-d]
                      [--log-level DEBUG|INFO|WARNING|ERROR|CRITICAL [DEBUG|INFO|WARNING|ERROR|CRITICAL ...]]
                      [--verbose] [-a ACCOUNTID]
                      [-c CONVERSATIONID [CONVERSATIONID ...]]
                      [--get-enabled-accounts] [--get-conversations]
                      [-m TEXT [TEXT ...]] [-f FILE [FILE ...]] [-w] [-z] [-k]
                      [-j] [--split SEPARATOR] [--separator SEPARATOR]
                      [-o TEXT|JSON] [-v [PRINT|CHECK]]

Welcome to jami-commander, a Jami CLI client.

options:
  --usage               Print usage. Details:: See also --help for printing a
                        bit more and --manual for printing a lot more detailed
                        information.
  -h, --help            Print help. Details:: See also --usage for printing
                        even less information, and --manual for printing more
                        detailed information.
  --manual              Print manual. Details:: See also --usage for printing
                        the absolute minimum, and --help for printing less.
  --readme              Print README.md file. Details:: Tries to print the
                        local README.md file from installation. If not found
                        it will get the README.md file from github.com and
                        print it. See also --usage, --help, and --manual.
  -d, --debug           Print debug information. Details:: If used once, only
                        the log level of jami-commander is set to DEBUG. If
                        used twice ("-d -d" or "-dd") then log levels of both
                        jami-commander and underlying modules are set to
                        DEBUG. "-d" is a shortcut for "--log-level DEBUG". See
                        also --log-level. "-d" takes precedence over "--log-
                        level". Additionally, have a look also at the option "
                        --verbose".
  --log-level DEBUG|INFO|WARNING|ERROR|CRITICAL [DEBUG|INFO|WARNING|ERROR|CRITICAL ...]
                        Set the log level(s). Details:: Possible values are
                        "DEBUG", "INFO", "WARNING", "ERROR", and "CRITICAL".
                        If --log_level is used with one level argument, only
                        the log level of jami-commander is set to the
                        specified value. If --log_level is used with two level
                        argument (e.g. "--log-level WARNING ERROR") then log
                        levels of both jami-commander and underlying modules
                        are set to the specified values. See also --debug.
  --verbose             Set the verbosity level. Details:: If not used, then
                        verbosity will be set to low. If used once, verbosity
                        will be high. If used more than once, verbosity will
                        be very high. Verbosity only affects the debug
                        information. So, if '--debug' is not used then '--
                        verbose' will be ignored.
  -a ACCOUNTID, --account ACCOUNTID
                        Connect to and use the specified account. Details::
                        This requires exactly one argument, the account id.
                        This is not the user name but the long random looking
                        string made up of hexadecimal digits. If --account is
                        not used then {PROG_WITHOUT_EXT} will try to
                        automatically detect and use an enabled account.
  -c CONVERSATIONID [CONVERSATIONID ...], --conversations CONVERSATIONID [CONVERSATIONID ...]
                        Specify one or multiple swarm conversations. Details::
                        Optionally specify one or multiple swarm conversations
                        via swarm ids (conversation ids). Swarm ids are long
                        random looking hexadecial strings. --conversations is
                        used by various send actions and various listen
                        actions. The chosen account must have access to the
                        specified conversations in order to send messages
                        there or listen on the conversations. Messages cannot
                        be sent to arbitrary conversations.
  --get-enabled-accounts
                        List all enabled accounts by ids. Details:: Prints all
                        enabled account ids.
  --get-conversations   List all swarm conversations by ids for the active
                        account. Details:: Prints the swarm ids all swarm
                        conversations associated with the specified or
                        automatically chosen account.
  -m TEXT [TEXT ...], --message TEXT [TEXT ...]
                        Send one or multiple text messages. Details:: Message
                        data must not be binary data, it must be text. If no
                        '-m' is used and no other conflicting arguments are
                        provided, and information is piped into the program,
                        then the piped data will be used as message. Finally,
                        if there are no operations at all in the arguments,
                        then a message will be read from stdin, i.e. from the
                        keyboard. This option can be used multiple times to
                        send multiple messages. If there is data piped into
                        this program, then first data from the pipe is
                        published, then messages from this option are
                        published. Messages will be sent last, i.e. after
                        objects like files. Input piped via stdin can
                        additionally be specified with the special character
                        '-'. If you want to feed a text message into jami-
                        commander via a pipe, via stdin, then specify the
                        special character '-'. If '-' is specified as message,
                        then the program will read the message from stdin.
                        With '-' the whole message, all lines, will be
                        considered a single message and sent as one message.
                        If your message is literally '-' then use '\-' as
                        message in the argument. '-' may appear in any
                        position, i.e. '-m "start" - "end"' will send 3
                        messages out of which the second one is read from
                        stdin. '-' may appear only once overall in all
                        arguments. Similar to '-', another shortcut character
                        is '_'. The special character '_' is used for
                        streaming data via a pipe on stdin. With '_' the stdin
                        pipe is read line-by-line and each line is treated as
                        a separate message and sent right away. The program
                        waits for pipe input until the pipe is closed. E.g.
                        Imagine a tool that generates output sporadically
                        24x7. It can be piped, i.e. streamed, into jami-
                        commander, and jami-commander stays active, sending
                        all input instantly. If you want to send the literal
                        letter '_' then escape it and send '\_'. '_' can be
                        used only once. And either '-' or '_' can be used.
  -f FILE [FILE ...], --file FILE [FILE ...]
                        Send one or multiple files (e.g. PDF, DOC, MP4).
                        Details:: This option can be used multiple times to
                        send multiple files. First files are sent, then text
                        messages are sent. If you want to feed a file into
                        jami-commander via a pipe, via stdin, then specify the
                        special character '-'. See description of '-m' to see
                        how '-' is handled.
  -w, --html            Send message as format "HTML". Details:: If not
                        specified, message will be sent as format "TEXT". E.g.
                        that allows some text to be bold, etc. Currently no
                        HTML tags are accepted by Jami.
  -z, --markdown        Send message as format "MARKDOWN". Details:: If not
                        specified, message will be sent as format "TEXT". E.g.
                        that allows sending of text formatted in MarkDown
                        language.
  -k, --code            Send message as format "CODE". Details:: If not
                        specified, message will be sent as format "TEXT". If
                        both --html and --code are specified then --code takes
                        priority. This is useful for sending ASCII-art or
                        tabbed output like tables as a fixed-sized font will
                        be used for display.
  -j, --emojize         Send message after emojizing. Details:: If not
                        specified, message will be sent as format "TEXT". If
                        both --code and --emojize are specified then --code
                        takes priority. This is useful for sending emojis in
                        shortcode form :collision:.
  --split SEPARATOR     Split message text into multiple Jami messages.
                        Details:: If set, split the message(s) into multiple
                        messages wherever the string specified with --split
                        occurs. E.g. One pipes a stream of RSS articles into
                        the program and the articles are separated by three
                        newlines. Then with --split set to "\n\n\n" each
                        article will be printed in a separate message. By
                        default, i.e. if not set, no messages will be split.
  --separator SEPARATOR
                        Set a custom separator used for certain print outs.
                        Details:: By default, i.e. if --separator is not used,
                        4 spaces are used as separator between columns in
                        print statements. You could set it to '\t' if you
                        prefer a tab, but tabs are usually replaced with
                        spaces by the terminal. So, that might not give you
                        what you want. Maybe ' || ' is an alternative choice.
  -o TEXT|JSON, --output TEXT|JSON
                        Select an output format. Details:: This option decides
                        on how the output is presented. Currently offered
                        choices are: 'text' and 'json'. Provide one of these
                        choices. The default is 'text'. If you want to use the
                        default, then there is no need to use this option. If
                        you have chosen 'text', the output will be formatted
                        with the intention to be consumed by humans, i.e.
                        readable text. If you have chosen 'json', the output
                        will be formatted as JSON. The content of the JSON
                        object matches the data provided by the Jami API. In
                        some occasions the output is enhanced by having a few
                        extra data items added for convenience. In most cases
                        the output will be processed by other programs rather
                        than read by humans.
  -v [PRINT|CHECK], -V [PRINT|CHECK], --version [PRINT|CHECK]
                        Print version information or check for updates.
                        Details:: This option takes zero or one argument. If
                        no argument is given, 'print' is assumed which will
                        print the version of the currently installed
                        'PROG_WITHOUT_EXT' package. 'check' is the
                        alternative. '{CHECK}' connects to https://pypi.org
                        and gets the version number of latest stable release.
                        There is no 'calling home' on every run, only a 'check
                        pypi.org' upon request. Your privacy is protected. The
                        new release is neither downloaded, nor installed. It
                        just informs you. After printing version information
                        the program will continue to run. This is useful for
                        having version number in the log files.

You are running version 0.2.0 2024-08-23. Enjoy, star on Github and contribute
by submitting a Pull Request.
